//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Prefabs/Character/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Playing"",
            ""id"": ""60943a4d-8bb5-4a7b-a914-602f625c4d6b"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cd50943e-5376-4086-9712-bcb0b5c4fd1a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""896f97f9-6e2c-49fe-9851-e737750c97ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""f0086d6d-e591-4518-9605-b3ac8f47d1e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""98b5b36d-f0fd-4460-990d-cf56d83f836d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""7deb0c4d-37ef-49d7-8f16-9a833965f0f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""02acfcbc-15bd-4b98-a110-6a3aced75dfd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""6f15be12-8efc-4903-9615-a4e36edd7d0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""54cc3d6c-aaed-44b6-bee7-af4804ce1e27"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""af56f729-f488-4049-a436-afbef6a91c1a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3d4627cb-3333-4978-b46e-8c1828405ee4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ca79ef85-52b7-409a-af0f-cb5464a36041"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""710d81c7-d29e-436c-b1c4-b18882e1dd69"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7729faba-af1d-4d7a-ac0d-fb516027721d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4a215d8-dbe0-4cbb-939b-f29801fb43af"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c112f276-f0df-4cd2-85cd-27241d66aae2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c58a5d9-cc86-499a-8063-6f7b15bc089d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca167fbe-5159-45b2-b889-8fd6443d87dc"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbe0a21a-b4fc-45a0-b108-2fd9f07a2838"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Playing
        m_Playing = asset.FindActionMap("Playing", throwIfNotFound: true);
        m_Playing_Walk = m_Playing.FindAction("Walk", throwIfNotFound: true);
        m_Playing_Jump = m_Playing.FindAction("Jump", throwIfNotFound: true);
        m_Playing_PrimaryWeapon = m_Playing.FindAction("Primary Weapon", throwIfNotFound: true);
        m_Playing_SecondaryWeapon = m_Playing.FindAction("Secondary Weapon", throwIfNotFound: true);
        m_Playing_Interact = m_Playing.FindAction("Interact", throwIfNotFound: true);
        m_Playing_Look = m_Playing.FindAction("Look", throwIfNotFound: true);
        m_Playing_Menu = m_Playing.FindAction("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Playing
    private readonly InputActionMap m_Playing;
    private IPlayingActions m_PlayingActionsCallbackInterface;
    private readonly InputAction m_Playing_Walk;
    private readonly InputAction m_Playing_Jump;
    private readonly InputAction m_Playing_PrimaryWeapon;
    private readonly InputAction m_Playing_SecondaryWeapon;
    private readonly InputAction m_Playing_Interact;
    private readonly InputAction m_Playing_Look;
    private readonly InputAction m_Playing_Menu;
    public struct PlayingActions
    {
        private @PlayerControls m_Wrapper;
        public PlayingActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_Playing_Walk;
        public InputAction @Jump => m_Wrapper.m_Playing_Jump;
        public InputAction @PrimaryWeapon => m_Wrapper.m_Playing_PrimaryWeapon;
        public InputAction @SecondaryWeapon => m_Wrapper.m_Playing_SecondaryWeapon;
        public InputAction @Interact => m_Wrapper.m_Playing_Interact;
        public InputAction @Look => m_Wrapper.m_Playing_Look;
        public InputAction @Menu => m_Wrapper.m_Playing_Menu;
        public InputActionMap Get() { return m_Wrapper.m_Playing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayingActions set) { return set.Get(); }
        public void SetCallbacks(IPlayingActions instance)
        {
            if (m_Wrapper.m_PlayingActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_PlayingActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_PlayingActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_PlayingActionsCallbackInterface.OnWalk;
                @Jump.started -= m_Wrapper.m_PlayingActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayingActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayingActionsCallbackInterface.OnJump;
                @PrimaryWeapon.started -= m_Wrapper.m_PlayingActionsCallbackInterface.OnPrimaryWeapon;
                @PrimaryWeapon.performed -= m_Wrapper.m_PlayingActionsCallbackInterface.OnPrimaryWeapon;
                @PrimaryWeapon.canceled -= m_Wrapper.m_PlayingActionsCallbackInterface.OnPrimaryWeapon;
                @SecondaryWeapon.started -= m_Wrapper.m_PlayingActionsCallbackInterface.OnSecondaryWeapon;
                @SecondaryWeapon.performed -= m_Wrapper.m_PlayingActionsCallbackInterface.OnSecondaryWeapon;
                @SecondaryWeapon.canceled -= m_Wrapper.m_PlayingActionsCallbackInterface.OnSecondaryWeapon;
                @Interact.started -= m_Wrapper.m_PlayingActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayingActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayingActionsCallbackInterface.OnInteract;
                @Look.started -= m_Wrapper.m_PlayingActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayingActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayingActionsCallbackInterface.OnLook;
                @Menu.started -= m_Wrapper.m_PlayingActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_PlayingActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_PlayingActionsCallbackInterface.OnMenu;
            }
            m_Wrapper.m_PlayingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @PrimaryWeapon.started += instance.OnPrimaryWeapon;
                @PrimaryWeapon.performed += instance.OnPrimaryWeapon;
                @PrimaryWeapon.canceled += instance.OnPrimaryWeapon;
                @SecondaryWeapon.started += instance.OnSecondaryWeapon;
                @SecondaryWeapon.performed += instance.OnSecondaryWeapon;
                @SecondaryWeapon.canceled += instance.OnSecondaryWeapon;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
            }
        }
    }
    public PlayingActions @Playing => new PlayingActions(this);
    public interface IPlayingActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPrimaryWeapon(InputAction.CallbackContext context);
        void OnSecondaryWeapon(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
}
